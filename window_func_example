--сумма суммы и доля
select year, plan, sum(revenue),
sum(sum(revenue)) over(partition by year),
sum(revenue)/sum(sum(revenue)) over(partition by year)
from sales 
where 1=1 --plan = 'silver' 
group by 1,2
order by year,  plan



--условное заполнение одного столбца, другим
select year, month, revenue
, avg(case when month = 12 then revenue else null end)
over (partition by year )
from sales 
where plan = 'silver' 
group by 1,2,3
order by year,  month



--скользящее
select year, month, revenue, 
 AVG(revenue) OVER (ORDER BY  month
 ROWS BETWEEN 1 PRECEDING AND 1 following 
 ) AS avg 
from sales 
where plan = 'platinum' and year = 2020
--window w as (partition by  plan order by month )

order by  month 

-- нарастающий итог

select plan, year, month, revenue 
, sum(revenue) over w as eee
from sales 
where month in (1,2,3) and year = 2020
window w as (partition by  plan order by month )

order by plan, month



--lag, доля

select year, month, revenue ,

lag(revenue) over(order by month),
round(revenue::decimal/lag(revenue) over(order by month) * 100)
from sales 
where plan = 'gold' and year = 2020
order by month



--filter

select id, name, salary,
round(salary*100/avg(salary) over()),
round(salary*100/avg(salary)  filter(where city like 'Москва') over()),
round(salary*100/avg(salary)  filter(where city like 'Самара') over())

from employees
order by  id


-- скользящее
Чтобы посчитать скользящее среднее за последние три дня, удобнее всего использовать оконную функцию AVG(), указав определенный диапазон строк (ROWS BETWEEN 2 PRECEDING AND CURRENT ROW): 
 
SELECT 
 date, 
 amount, 
 AVG(amount) OVER ( 
 ORDER BY date 
 ROWS BETWEEN 2 PRECEDING 
 AND CURRENT ROW 
 ) AS avg 
FROM sales;


--  Среднее с условием
select id, name, salary,
avg(salary) over(order by salary 
				rows between 0 preceding and 3 following 
				exclude current row) av
from employees
order by salary, id




--среднее без учета значения
SELECT 
    name,
    salary,
    avg(salary) OVER (
        ORDER BY salary, id
        RANGE BETWEEN unbounded PRECEDING AND unbounded following
		exclude current row
    ) AS max_salary
FROM employees
ORDER BY salary, id;




--клдичество по входящих в группу +-5 от зарплаты
select id, name, salary, 
count(*) over(order by salary desc
			 range between 5 preceding and 5 following)
						
from employees
order by  salary, id



--найти макисмальное из ближайшего значения
select id, name, salary, 
max(salary) over(order by salary desc
			 rows between 1 preceding and 1 following)
						
from employees
order by  salary, id





--обратная сортировка данных
select id, name, department,salary, 
count(*) over(order by salary desc
			 rows between unbounded preceding and current row)						
from employees
order by  salary, id


--rows between unboundend precending and currentw row


--скользящее
select year, month, income , 
avg(income) over (order by month
				 rows between 1 preceding  and 0 following) as qwe
from expenses



--нарастающий итог
select id, name, department, salary,
sum(salary) over(partition by department 
				rows between unbounded  preceding  and 0 following)
				--rows between unbounded  preceding  and current row)
from employees



--явно задать границы фрейма
select  name, department, salary, round((salary*100.0/high))
from(
	select  name, department,   salary,
	last_value(salary) over w as high
	from employees
	window w as (
		partition by department 
		order by salary
		rows  between  unbounded preceding and unbounded following)
	order by city, salary asc
) 	t



-- dense_rank-- нумерует без пропуска.
select dense_rank() over(order by sum_n_messages desc )
,  id_guest
, sum_n_messages 
from (
  select  id_guest, 
  sum(n_messages) sum_n_messages 
  from airbnb_contacts 
  group by 1 
  order by 2 desc
) t;
